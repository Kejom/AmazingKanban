@page "/admin"
@attribute [Authorize(Roles = nameof(UserRoles.Admin))]
@inject IUsersService UserService
@inject IUserUtility UserUtility

<div class="container p-3">
    <div class="row pt-4">
        <div class="col-6">
            <h2 class="text-primary">User Management</h2>
        </div>
        <div class="col-6 text-right">
        </div>
    </div>
    <br /><br />
    <div class="form-group">
        <input class="form-control" type="text" placeholder="Filter..." @bind="Filter" @bind:event="oninput" />
    </div>
    <br />
    <table class="table table-bordered table-striped" style="width:100%">
        <thead>
            <tr>
                <th>
                    Full Name
                </th>
                <th>
                    Email
                </th>
                <th>
                    Role
                </th>

                <th></th>
            </tr>
        </thead>
        <tbody>
            <Virtualize Items="Users" Context="user">
                @if (IsVisible(user))
                {
                    <tr>
                        <td width="30%">@($"{user.User.FirstName} {user.User.LastName}")</td>
                        <td width="30%">@user.User.Email</td>
                        <td width="30%">@(user.IsAdmin ? "Admin" : "User")</td>
                        <td class="text-center">
                            <div class="w-75 btn-group" role="group">
                                @if (user.IsAdmin)
                                {
                                    <a class="btn btn-danger mx-2" @onclick="()=>Demote(user)">
                                        <span class="oi oi-chevron-bottom"></span>
                                    </a>
                                }
                                else
                                {
                                    <a class="btn btn-primary mx-2" @onclick="()=>Promote(user)">
                                        <span class="oi oi-chevron-top"></span>
                                    </a>
                                }
                            </div>
                        </td>
                    </tr>
                }

            </Virtualize>
        </tbody>
    </table>
</div>

@code {
    public List<UserVM> Users { get; set; } = new List<UserVM>();
    public string? Filter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await UserService.GetAllAsVM();
        var currentUserId = await UserUtility.GetCurrentUserId();
        Users = result.Where(u => u.User.Id != currentUserId).ToList();
    }

    async Task Promote(UserVM user)
    {
        var result = await UserService.PromoteToAdmin(user.User.Id);

        if (result)
            user.IsAdmin = true;
    }

    async Task Demote(UserVM user)
    {
        var result = await UserService.DemoteAdmin(user.User.Id);

        if (result)
            user.IsAdmin = false;
    }

    public bool IsVisible(UserVM user)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;

        if (user.User.FirstName.Contains(Filter, StringComparison.OrdinalIgnoreCase) ||
            user.User.LastName.Contains(Filter, StringComparison.OrdinalIgnoreCase) ||
            user.User.Email.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
