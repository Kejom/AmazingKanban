@page "/boards/{id}"
@inject IBoardService BoardService
@inject IUsersService UsersService

@attribute [Authorize]
<div class="container p-3">
    @if (Board is not null)
    {
        <div class="row pt-4">
            <div class="col-3">
                <h2 class="text-primary">@Board.Board.Name</h2>
            </div>
            <div class="col-3 text-right">
                <button class="btn btn-primary" style="width:100%"><span class="oi oi-task"></span> Create Task</button>
            </div>
            <div class="col-3 text-right">
                <button class="btn btn-primary" style="width:100%"><span class="oi oi-pencil"></span> Edit Board</button>
            </div>
            <div class="col-3 text-right">
                <button class="btn btn-primary" style="width:100%" @onclick="ShowManageUsersModal"><span class="oi oi-people"></span> Manage Users</button>
            </div>
        </div>
        <br />

        <br />
        <p>@Id</p>
    }
    else
    {
        <p>Something went wrong! Make sure that board with given Id exists and that you have access to it</p>
    }


</div>
@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    [Parameter] public string? Id { get; set; }

    public BoardVM? Board { get; set; }

    public List<UserVM> Users { get; set; } = new List<UserVM>();

    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
        {
            Board = await BoardService.GetBoardById(Int32.Parse(Id));
            Users = await UsersService.GetByBoardId(Int32.Parse(Id));
        }
    }
    void ShowManageUsersModal()
    {
        var parameters = new ModalParameters();
        parameters.Add("BoardId", Int32.Parse(Id));
        parameters.Add("Users", Users);

        Modal.Show<ManageUsers>("Manage Users", parameters);
    }


}
