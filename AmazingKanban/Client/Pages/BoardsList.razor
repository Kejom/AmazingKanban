@page "/boards"

@inject IBoardService BoardService
@attribute [Authorize]

<div class="container p-3">
    <div class="row pt-4">
        <div class="col-6">
            <h2 class="text-primary">Boards</h2>
        </div>
        <div class="col-6">
            <button @onclick="@(() => ShowBoardForm())" class="btn btn-primary float-end">Create New Board</button>
        </div>
    </div>
    <br /><br />



    @if (BoardService.Boards.Count > 0)
    {
        <div class="form-group">
            <input class="form-control" type="text" placeholder="Filter..." @bind="Filter" @bind:event="oninput" />
        </div>
        <br />
        <table class="table table-bordered table-striped" style="width:100%">
            <thead>
                <tr>
                    <th>
                        Name
                    </th>
                    <th>
                        Description
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var board in BoardService.Boards)
                {
                    if (!IsVisible(board))
                        continue;
                    <tr>
                        <td width="30%">@board.Name</td>
                        <td width="40%">
                            @GetShortDescription(board.Description)
                        </td>
                        <td width="30%" class="text-center">
                            <div class="w-75 btn-group">
                                <a class="btn btn-primary" @onclick="()=> ShowBoardInfo(board)"><span class="oi oi-info"></span></a>
                                <a class="btn btn-primary mx-2" href="@($"boards/{board.Id}")">
                                    Open
                                </a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No Boards to display</p>
    }
</div>
@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    public string? Filter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BoardService.OnChange += StateHasChanged;
        await BoardService.LoadBoardsAsync();
    }
    public void Dispose()
    {
        BoardService.OnChange -= StateHasChanged;
    }
    public void ShowBoardForm()
    {
        Modal.Show<BoardForm>("Create Board");
    }
    public void ShowBoardInfo(Board board)
    {
        var parameters = new ModalParameters();
        parameters.Add("Board", board);
        Modal.Show<BoardInfo>("Board Info", parameters);
    }
    public bool IsVisible(Board? board)
    {
        if (board is null)
            return false;

        if (string.IsNullOrEmpty(Filter))
            return true;

        if (board.Name.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    public string GetShortDescription(string description)
    {
        if (description.Length < 50)
            return description;
        return description.Substring(0, 45) + "(...)";
    }
}
