@inject IBoardService BoardService
@inject IUsersService UserService
@inject IUserUtility UserUtility

<div style="width:30em">
    <div class="border p-3" style="width:90%;margin:auto">
        <EditForm Model="newBoard" OnValidSubmit="CreateBoard">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="form-group" style="margin:5px">
                <div style="display:flex; justify-content:center"><label for="name" class="required">Board Name</label></div>
                <InputText id="name" @bind-Value="newBoard.Board.Name" class="form-control"></InputText>
                <ValidationMessage For="@(() => newBoard.Board.Name)" />
            </div>
            <div class="form-group" style="margin:5px">
                <div style="display:flex; justify-content:center"><label for="name" class="required" style="text-align:center">Board Description</label></div>
                <InputTextArea id="name" @bind-Value="newBoard.Board.Description" class="form-control" style="height:20em"></InputTextArea>
                <ValidationMessage For="@(() => newBoard.Board.Description)" />
            </div>
            <div class="form-group" style="margin:5px">
                <div style="display:flex; justify-content:center"><label for="users" style="text-align:center">User Access</label></div>
                <BlazoredTypeahead SearchMethod="@TypeAhead"
                                   @bind-Value="@SelectedUser"
                                   placeholder="Search for user.."
                                   Debounce="500">
                    <SelectedTemplate Context="selectedContext">
                        @selectedContext.Email
                    </SelectedTemplate>
                    <ResultTemplate Context="resultContext">
                        @resultContext.Email
                    </ResultTemplate>
                    <NotFoundTemplate Context="notFoundContext">
                        No users found
                    </NotFoundTemplate>
                </BlazoredTypeahead>
                <hr />
                <table class="table table-bordered table-striped" style="width:100%">
                    <thead>
                        <tr>
                            <th width="40%">
                                User Email
                            </th>
                            <th width="40%">
                                Access Level
                            </th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (!String.IsNullOrEmpty(SelectedUser.Email))
                        {
                            <tr>
                                <td>@SelectedUser.Email</td>
                                <td>
                                    <InputSelect @bind-Value="SelectedUser.BoardRole">
                                        @foreach (var role in Enum.GetValues(typeof(BoardRoles)))
                                        {
                                        <option value="@role">@role</option>
                                        }
                                </InputSelect>
                            </td>
                            <td>
                                <div class="w-75 btn-group" role="group">
                                    <button class="btn btn-success" @onclick="AddUserToList"><span class="oi oi-plus"></span></button>
                                </div>
                            </td>
                        </tr>
                        }
                        @if (SelectedUsers.Count > 0)
                        {
                            @foreach (var user in SelectedUsers)
                            {
                                <tr>
                                    <td>@user.Email</td>
                                    <td>
                                        <InputSelect @bind-Value="user.BoardRole">
                                            @foreach (var role in Enum.GetValues(typeof(BoardRoles)))
                                            {
                                        <option value="@role">@role</option>
                                            }
                                </InputSelect>
                            </td>
                            <td>
                                <div class="w-75 btn-group" role="group">
                                    <button class="btn btn-danger" @onclick="()=> SelectedUsers.Remove(user)"><span class="oi oi-delete"></span></button>
                                </div>
                            </td>
                        </tr>
                            }
                        }
                    </tbody>
                </table>

            </div>
            <div style="display:flex; justify-content:center; margin:5px"><button type="submit" class="btn btn-primary">Create</button></div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    BoardVM newBoard = new BoardVM();
    UserVM SelectedUser = new UserVM();
    List<UserVM> SelectedUsers = new List<UserVM>();

    async Task CreateBoard()
    {
        AddSelectedUsersToNewBoard();
        await BoardService.AddBoard(newBoard);
        await ModalInstance.CloseAsync();
    }

    async Task TestUsers()
    {
        var users = await UserService.GetUsers("Admin");
        foreach (var user in users)
        {
            Console.WriteLine(user.Email);
        }
    }
    async Task<IEnumerable<UserVM>> TypeAhead(string filter)
    {
        var users = await UserService.GetUsers(filter);
        var currentUserId = await UserUtility.GetCurrentUserId();
        Console.WriteLine($"current user ID: {currentUserId}");
        return users.Where(u => !SelectedUsers.Exists(s => s.Id == u.Id) && u.Id != currentUserId).ToList();
    }
    void AddUserToList()
    {
        SelectedUser.BoardRole = BoardRoles.User;
        SelectedUsers.Add(SelectedUser);
        SelectedUser = new UserVM();
    }

    void AddSelectedUsersToNewBoard()
    {
        foreach(var user in SelectedUsers)
        {
            newBoard.UserAccesses.Add(
                new BoardUserAccess
                    {
                        UserId = user.Id,
                        Role = user.BoardRole.Value
                    }
            );
        }
    }
}
