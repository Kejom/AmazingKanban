@inject IBoardService BoardService
@inject IUsersService UserService
@inject IUserUtility UserUtility

<div style="width:30em">
    <div class="border p-3" style="width:90%;margin:auto">
        <EditForm Model="newBoard.Board" OnValidSubmit="CreateBoard">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="form-group" style="margin:5px">
                <div style="display:flex; justify-content:center"><label for="name" class="required">Board Name</label></div>
                <InputText id="name" @bind-Value="newBoard.Board.Name" class="form-control"></InputText>
                <ValidationMessage For="@(() => newBoard.Board.Name)" />
            </div>
            <div class="form-group" style="margin:5px">
                <div style="display:flex; justify-content:center"><label for="name" class="required" style="text-align:center">Board Description</label></div>
                <InputTextArea id="description" @bind-Value="newBoard.Board.Description" class="form-control" style="height:20em"></InputTextArea>
                <ValidationMessage For="@(() => newBoard.Board.Description)" />
            </div>
            <div class="form-group" style="margin:5px">
                <div style="display:flex; justify-content:center"><label for="users" style="text-align:center">User Access</label></div>
                <BlazoredTypeahead SearchMethod="@TypeAhead"
                                   @bind-Value="@newAccess"
                                   placeholder="Search for user.."
                                   Debounce="500">
                    <SelectedTemplate Context="selectedContext">
                        @selectedContext.User.Email
                    </SelectedTemplate>
                    <ResultTemplate Context="resultContext">
                        @resultContext.User.Email
                    </ResultTemplate>
                    <NotFoundTemplate Context="notFoundContext">
                        No users found
                    </NotFoundTemplate>
                </BlazoredTypeahead>
                <hr />
                <table class="table table-bordered table-striped" style="width:100%">
                    <thead>
                        <tr>
                            <th width="40%">
                                User Email
                            </th>
                            <th width="40%">
                                Access Level
                            </th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (!String.IsNullOrEmpty(newAccess.User.Email))
                        {
                            <tr>
                                <td>@newAccess.User.Email</td>
                                <td>
                                    <InputSelect @bind-Value="newAccess.Role">
                                        @foreach (var role in Enum.GetValues(typeof(BoardRoles)))
                                        {
                                        if((BoardRoles)role == BoardRoles.NoAccess)
                                                continue;

                                        <option value="@role">@role</option>
                                        }
                                </InputSelect>
                            </td>
                            <td>
                                <div class="w-75 btn-group" role="group">
                                    <button class="btn btn-success" @onclick="AddUserToList"><span class="oi oi-plus"></span></button>
                                </div>
                            </td>
                        </tr>
                        }
                        @if (newBoard.UserAccesses.Count > 0)
                        {
                            @foreach (var access in newBoard.UserAccesses)
                            {
                                <tr>
                                    <td>@access.User.Email</td>
                                    <td>
                                        <InputSelect @bind-Value="access.Role">
                                            @foreach (var role in Enum.GetValues(typeof(BoardRoles)))
                                            {
                                        <option value="@role">@role</option>
                                            }
                                </InputSelect>
                            </td>
                            <td>
                                <div class="w-75 btn-group" role="group">
                                    <button class="btn btn-danger" @onclick="()=> newBoard.UserAccesses.Remove(access)"><span class="oi oi-delete"></span></button>
                                </div>
                            </td>
                        </tr>
                            }
                        }
                    </tbody>
                </table>

            </div>
            <div style="display:flex; justify-content:center; margin:5px"><button type="submit" class="btn btn-primary">Create</button></div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    BoardSubmitVM newBoard = new BoardSubmitVM();
    BoardAccess<UserLite> newAccess = new BoardAccess<UserLite>(){ User = new UserLite()};


    async Task CreateBoard()
    {
        await BoardService.AddBoard(newBoard);
        await ModalInstance.CloseAsync();
    }

    async Task<IEnumerable<BoardAccess<UserLite>>> TypeAhead(string filter)
    {
        var users = await UserService.GetUsers(filter);
        var usersVM = users.Select(u => new BoardAccess<UserLite>
            {
                UserId = u.Id,
                User = u,
                Role = BoardRoles.User

            });
        var currentUserId = await UserUtility.GetCurrentUserId();
        return usersVM.Where(u => !newBoard.UserAccesses.Exists(a => a.UserId == u.UserId) && u.UserId != currentUserId).ToList();
    }
    void AddUserToList()
    {
        newBoard.UserAccesses.Add(newAccess);
        newAccess = new BoardAccess<UserLite>(){ User = new UserLite()};
    }
}
