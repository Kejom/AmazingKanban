@inject ITaskService TaskService

<div class="container">
    <div class="card">
        <div class="form-group">
            <input class="form-control" type="text" placeholder="Filter..." @bind="Filter" @bind:event="oninput" />
        </div>
        <div class="row pt-4">
            <div class="col-1"></div>
            <div class="col-2 text-center">
                <span class="text-info h4">@KanbanTaskStates.New.GetDisplayName()</span>
            </div>
            <div class="col-2 text-center">
                <span class="text-info h4">@KanbanTaskStates.ToDo.GetDisplayName()</span>
            </div>
            <div class="col-2 text-center">
                <span class="text-info h4">@KanbanTaskStates.InProgress.GetDisplayName()</span>
            </div>
            <div class="col-2 text-center">
                <span class="text-info h4">@KanbanTaskStates.Testing.GetDisplayName()</span>
            </div>
            <div class="col-2 text-center">
                <span class="text-info h4">@KanbanTaskStates.Done.GetDisplayName()</span>
            </div>
            <div class="col-1"></div>
        </div>
        <div class="row pt-4">
            <div class=col-1></div>

            @foreach (KanbanTaskStates state in Enum.GetValues(typeof(KanbanTaskStates)))
            {
                <div class="col-2">
                    <Virtualize Items="@TaskService.Tasks[state]" Context="task">

                        @if (IsVisible(task))
                    {
                        <TaskCard KanbanTask="task" UserRole="UserRole" />
                    }
                </Virtualize>
            </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public int BoardId { get; set; }
    [Parameter] public BoardRoles UserRole { get; set; }
    public string? Filter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        TaskService.OnChange += StateHasChanged;
        await TaskService.LoadTasksAsync(BoardId);
    }

    public void Dispose()
    {
        TaskService.OnChange -= StateHasChanged;
    }

    public bool IsVisible(KanbanTask<UserLite> task)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;

        if (task.Title.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (task.CreatedBy.Email.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (task.AssignedTo is not null && task.AssignedTo.Email.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (task.Validator is not null && task.Validator.Email.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
