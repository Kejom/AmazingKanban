@inject ITaskService TaskService

<div class="container">
    <div class="card">
        <div class="row pt-4">
            <div class="col-1"></div>
            <div class="col-2 text-center">
                <span class="text-info h4">@KanbanTaskStates.New.GetDisplayName()</span>
            </div>
            <div class="col-2 text-center">
                <span class="text-info h4">@KanbanTaskStates.ToDo.GetDisplayName()</span>
            </div>
            <div class="col-2 text-center">
                <span class="text-info h4">@KanbanTaskStates.InProgress.GetDisplayName()</span>
            </div>
            <div class="col-2 text-center">
                <span class="text-info h4">@KanbanTaskStates.Testing.GetDisplayName()</span>
            </div>
            <div class="col-2 text-center">
                <span class="text-info h4">@KanbanTaskStates.Done.GetDisplayName()</span>
            </div>
            <div class="col-1"></div>
        </div>
        <div class="row pt-4">
            <div class=col-1></div>
            @foreach(var tasks in TaskService.Tasks)
            {
                <div class="col-2">
                    @foreach(var task in tasks.Value)
                    {
                        <TaskCard KanbanTask="task" UserRole="UserRole"/>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]public int BoardId{ get; set; }
    [Parameter]public BoardRoles UserRole { get; set; }

    protected override async Task OnInitializedAsync()
    {
        TaskService.OnChange += StateHasChanged;
        await TaskService.LoadTasksAsync(BoardId);
    }

    public void Dispose()
    {
        TaskService.OnChange -= StateHasChanged;
    }
}
