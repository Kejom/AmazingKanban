@inject IUsersService UserService
@inject IUserUtility UserUtility
@inject IBoardService BoardService
@inject IBoardAccessService AccessService

<div style="width:25em">
    <div class="border p-3" style="width:90%;margin:auto">
        <EditForm Model="BoardAccesses" OnValidSubmit="UpdateUsers">
            <BlazoredTypeahead SearchMethod="@TypeAhead"
                               @bind-Value="@SelectedUser"
                               placeholder="Search for user.."
                               Debounce="500">
                <SelectedTemplate Context="selectedContext">
                    @selectedContext.User.Email
                </SelectedTemplate>
                <ResultTemplate Context="resultContext">
                    @resultContext.User.Email
                </ResultTemplate>
                <NotFoundTemplate Context="notFoundContext">
                    No users found
                </NotFoundTemplate>
            </BlazoredTypeahead>
            <hr />
            <table class="table table-bordered table-striped" style="width:100%">
                <thead>
                    <tr>
                        <th width="40%">
                            User Email
                        </th>
                        <th width="40%">
                            Access Level
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @if (!String.IsNullOrEmpty(SelectedUser.User.Email))
                    {
                        <tr>
                            <td>@SelectedUser.User.Email</td>
                            <td>
                                <InputSelect @bind-Value="SelectedUser.Role">
                                    @foreach (var role in Enum.GetValues(typeof(BoardRoles)))
                                    {
                                    <option value="@role">@role</option>
                                    }
                            </InputSelect>
                        </td>
                        <td>
                            <div class="w-75 btn-group" role="group">
                                <button class="btn btn-success" @onclick="AddUserToList"><span class="oi oi-plus"></span></button>
                            </div>
                        </td>
                    </tr>
                    }
                    @if (BoardAccesses.Count > 0)
                    {
                        @foreach (var access in BoardAccesses)
                        {
                            <tr>
                                <td>@access.User.Email</td>
                                <td>
                                    <InputSelect @bind-Value="access.Role" disabled="@IsDisabled(access)">
                                        @foreach (var role in Enum.GetValues(typeof(BoardRoles)))
                                        {
                                            if ((BoardRoles)role == BoardRoles.NoAccess)
                                                continue;
                                    <option value="@role">@role</option>
                                        }
                            </InputSelect>
                        </td>
                        <td>
                            <div class="w-75 btn-group" role="group">
                                @if (!IsDisabled(access))
                                        {
                                            <button class="btn btn-danger" @onclick="()=> BoardAccesses.Remove(access)"><span class="oi oi-delete"></span></button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            <div style="display:flex; justify-content:center; margin:5px"><button type="submit" class="btn btn-primary">Save Changes</button></div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int BoardId { get; set; }
    [Parameter] public List<BoardAccess<UserLite>> BoardAccesses { get; set; }

    BoardAccess<UserLite>SelectedUser = new BoardAccess<UserLite>(){User = new UserLite()};
    string currentUserId = String.Empty;

    async Task<IEnumerable<BoardAccess<UserLite>>> TypeAhead(string filter)
    {
        var users = await UserService.GetUsers(filter);
        var accesses = users.Select(u => new BoardAccess<UserLite>
            {
                BoardId = BoardId,
                UserId = u.Id,
                User = u,
                Role = BoardRoles.User
            });

        return accesses.Where(u => !BoardAccesses.Exists(s => s.UserId == u.User.Id) && u.User.Id != currentUserId).ToList();
    }
    async Task UpdateUsers()
    {
        await AccessService.UpdateForBoardId(BoardId, BoardAccesses);
        await ModalInstance.CloseAsync();
    }
    void AddUserToList()
    {
        BoardAccesses.Add(SelectedUser);
        SelectedUser = new BoardAccess<UserLite>(){User = new UserLite()};
    }

    bool IsDisabled(BoardAccess<UserLite> access)
    {
        return access.UserId == currentUserId;
    }

    protected override async Task OnInitializedAsync()
    {
        currentUserId = await UserUtility.GetCurrentUserId();
    }
}
